module UART8_Receiver
(RCV_datareg, read_not_ready_out, Error1 ,Error2, Serial_in, read_no_ready_in, Sample_clk, reset_); //Sample_clk is 8x Bit_clk
parameter word_size = 8;
parameter half_word = word_size/2;
parameter Num_count_bits = 4; //to hold count of word_size
parameter Num_state_bits = 2; //number of bits in states
parameter idle = 2’b00;
parameter starting = 2’b01;
parameter receiving = 2’b10;
output [word_size – 1:0] RCV_datareg;
output read_not_ready_out, Error1, Error2;
input Serial_in, Sample_clk, reset_, read_not_ready_in;
reg RCV_datareg;
reg [word_size – 1:0] RCV_shftreg;
reg [Num_counter_bits – 1:0] Sample_counter;
reg [Num_counter_bits:0] Bit_counter;
reg [Num_state_bits – 1:0] state, next_state;
reg inc_Bit_counter, clr_Bit_counter;
reg inc_Sample_counter, clr_Sample_counter;
reg shift, load, read_not_ready_out;
reg Error1, Error2;
always @ (state or Serial_in or read_not_ready_in or Sample_counter or Bit_counter) begin
read_not_ready_out = 0;
clr_Sample_counter = 0;
clr_Bit_counter = 0;
inc_Sample_counter = 0;
inc_Bit_counter = 0;
shift = 0;
Error1 = 0;
Error2 = 0;
load = 0;
next_state = state;
case (state)
idle: if (Serial_in = = 0) next_state = starting;
starting: if (Serial_in = = 1) begin
next_state = idle;
clr_Sample_counter = 1 ;
end else
if (Sample_counter = = half_word - 1) begin
next_state = receiving;
clr_Sample_counter = 1 ;
end else inc_Sample_counter = 1 ;
receiving: if (Sample_counter < word_ size - 1) inc_Sample_counter = 1 ;
else begin
clr_Sample_counter = 1 ;
if (Bit_counter != word_size) begin
shift = 1 ;
inc_Bit_counter = 1 ;
end
else begin
next_state = idle;
read_not_ready_out = 1 ;
clr_Bit_counter = 1 ;
if (read_not_ready_in = = 1 ) Error1 = 1 :
else if (Serial_in = = 0) Error2 = 1 ;
else load = 1 ;
end end
default: next_state = idle;
endcase
end
always @ (posedge Sample_clk) begin
if (reset_ = = 0) begin
state <= idle;
Sample_counter <= 0;
Bit_counter <= 0;
RCV_datareg <= 0;
RCV_shftreg <= 0;
end
else begin
state <= next_state;
if (clr_Sample_counter = = 1 ) Sample_counter <= 0;
else if (inc_Sample_counter = = 1 ) Sample_counter <= Sample_counter + 1 ;
if (clr_Bit_counter = = 1 ) Bit_counter <= 0;
else if (inc_Bit_counter == 1) Bit_counter <= Bit_counter + 1 ;
if (shift = = 1 ) RCV_shftreg <= (Serial_in, RCV_shftreg[word_size - 1 : 1)};
if (load = = 1) RCV_datareg <= RCV_shftreg;
end
end 
endmodule